let Hotel,fs,Order;_7d0‍.x([["create",()=>create],["hotels",()=>hotels],["image",()=>image],["sellerHotels",()=>sellerHotels],["remove",()=>remove],["read",()=>read],["update",()=>update],["userHotelBookings",()=>userHotelBookings],["isAlreadyBooked",()=>isAlreadyBooked],["searchListings",()=>searchListings]]);_7d0‍.w("../models/hotel",[["default",["Hotel"],function(v){Hotel=v}]]);_7d0‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_7d0‍.w("../models/order",[["default",["Order"],function(v){Order=v}]]);



       const create = async (req, res) => {
        // console.log("req.fields", req.fields);
        // console.log("req.files", req.files);
        try {
                let fields = req.fields;
                let files = req.files;

                let hotel = new Hotel(fields);
                hotel.postedBy = req.user._id;
                //handle image
                if(files.image) {
                    hotel.image.data = fs.readFileSync(files.image.path)
                    hotel.image.contentType = files.image.type;
                }

                hotel.save((err, result) => {
                    if(err) {
                        _7d0‍.g.console.log("saving hotel err =>", err)
                        res.status(400).send("Error saving")
                    }
                    res.json(result);
                })
        } catch (err) {
                _7d0‍.g.console.log(err);
                res.status(400).json({
                        err: err.message,
                }); 
        }
}

       const hotels = async (req, res) => {
    let all = await Hotel.find({}).limit(24).select("-image.data").populate("postedBy", '_id name').exec();
    res.json(all);
};

       const image = async (req, res) => {
    let hotel = await Hotel.findById(req.params.hotelId).exec();
    if(hotel && hotel.image && hotel.image.data !== null) {
        res.set('Content-Type', hotel.image.contentType)
        return res.send(hotel.image.data);
    }
}

       const sellerHotels = async (req, res) => {
    let all = await Hotel.find({postedBy: req.user._id})
        .select("-image.data")
        .populate("postedBy", "_id name")
        .exec();

    res.send(all);

}

       const remove = async(req, res) => {
    let removed = await Hotel.findByIdAndDelete(req.params.hotelId).exec();
    res.json(removed);
}

       const read = async (req, res) => {
    let hotel = await Hotel.findById(req.params.hotelId)
    .populate("postedBy", "_id name")
    .select("-image.data")
    .exec();
    _7d0‍.g.console.log("SINGLE HOTEL", hotel);
    res.json(hotel);
}

       const update = async (req, res) => {
    try {
        let fields = req.fields;
        let files = req.files;

        let data = {...fields}

        if(files.image) {
            let image = {}
            image.data = fs.readFileSync(files.image.path)
            image.contentType = files.image.type

            data.image = image;
        }

        let updated = await Hotel.findByIdAndUpdate(req.params.hotelId, data, {
            new: true
        }).select("-image.data")
        res.json(updated);
    } catch (err) {
        _7d0‍.g.console.log(err)
        res.status(400).send("Hotel update failed. Try again.");
    }
}

       const userHotelBookings = async (req, res) => {
    const all = await Order.find({orderedBy: req.user._id}).select('session').populate('hotel', '-image.data').populate('orderedBy', '_id name').exec();
    res.json(all);
}

       const isAlreadyBooked = async (req, res) => {
    const {hotelId} = req.params;
    //find orders of the currently logged in user
    const userOrders = await Order.find({orderedBy: req.user._id}).select("hotel").exec();
    //checl if hotel id is found in userOrders array
    let ids = []
    for (let i = 0; i < userOrders.length; i++) {
        ids.push(userOrders[i].hotel.toString())
    }

    res.json({
        ok: ids.includes(hotelId), 
    })
}

       const searchListings = async (req, res)
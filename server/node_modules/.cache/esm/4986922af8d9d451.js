let mongoose,bcrypt;_f8d‍.x([["default",()=>_f8d‍.o]]);_f8d‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_f8d‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const {Schema} = mongoose

const userSchema = new Schema({
    name: {
        type: String,
        trim: true,
        required: 'Name is required'
    },
    email: {
        type: String,
        trim: true,
        required: 'Email is required',
        unique: true
    },
    password: {
        type: String,
        required: true,
        min: 6,
        max: 64
    },
    stripe_account_id: '',
    stripe_seller: {},
    stripeSession: {}
    },
    { timestamps: true }
);


userSchema.pre('save', function(next) {
    let user = this;
    if(user.isModified('password')) {
        return bcrypt.hash(user.password, 12, function (err, hash) {
            if(err) {
                _f8d‍.g.console.log('BCRYPT HASH ERROR', err);
                return next(err);
            }
            user.password = hash;
            return next();
        });
    } else {
        return next();
    }
});

userSchema.methods.comparePassword = function (password, next) {
    bcrypt.compare(password, this.password, function(err, match) {
        if(err) {
            _f8d‍.g.console.log('COMPARE PASSWORD ERR', err);
            return next(err, false);
        }
        _f8d‍.g.console.log("MATCH PASSWORD", match)
        return next(null, match);
    })
}

_f8d‍.d(mongoose.model("User", userSchema));